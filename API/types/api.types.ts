/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/cities': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['City'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewCity']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['City']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/cities/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/cities/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['City']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewCity']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['City']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/countries': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Country'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewCountry']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Country']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/countries/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/countries/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Country']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewCountry']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Country']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/orders': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Order'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewOrder']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Order']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/orders/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/orders/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Order']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewOrder']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Order']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/payment-cards': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewPayment-card']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/payment-cards/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/payment-cards/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewPayment-card']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/payments': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Payment'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewPayment']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Payment']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/payments/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/payments/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Payment']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewPayment']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Payment']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/privacy-policy': {
		/** @description Find all the privacy-policy's records */
		get: {
			/** @description Find all the privacy-policy's records */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description Retrieve privacy-policy document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a single privacy-policy record */
		put: {
			/** @description Update a single privacy-policy record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewPrivacy-policy']
				}
			}
			responses: {
				/** @description Retrieve privacy-policy document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a single privacy-policy record */
		delete: {
			/** @description Delete a single privacy-policy record */
			responses: {
				/** @description deletes a single privacy-policy based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/profiles': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewProfile']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/profiles/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/profiles/{uid}': {
		get: {
			parameters: {
				path: {
					uid: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/profiles/{id}': {
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewProfile']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/remarks': {
		/** @description Find all the remarks's records */
		get: {
			/** @description Find all the remarks's records */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description Retrieve remarks document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Remarks'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new remarks record */
		post: {
			/** @description Create a new remarks record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewRemarks']
				}
			}
			responses: {
				/** @description Retrieve remarks document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Remarks']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/remarks/count': {
		/** @description Retrieve the number of remarks documents */
		get: {
			/** @description Retrieve the number of remarks documents */
			responses: {
				/** @description Retrieve remarks document(s) */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/remarks/{id}': {
		/** @description Find one remarks record */
		get: {
			/** @description Find one remarks record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description Retrieve remarks document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Remarks']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a single remarks record */
		put: {
			/** @description Update a single remarks record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewRemarks']
				}
			}
			responses: {
				/** @description Retrieve remarks document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Remarks']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a single remarks record */
		delete: {
			/** @description Delete a single remarks record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single remarks based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/reviews': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Review'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewReview']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Review']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/reviews/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/reviews/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Review']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewReview']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Review']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/settings': {
		/** @description Find all the settings's records */
		get: {
			/** @description Find all the settings's records */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description Retrieve settings document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Settings'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a single settings record */
		put: {
			/** @description Update a single settings record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewSettings']
				}
			}
			responses: {
				/** @description Retrieve settings document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Settings']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a single settings record */
		delete: {
			/** @description Delete a single settings record */
			responses: {
				/** @description deletes a single settings based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/tours': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Tour'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewTour']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Tour']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/tours/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/tours/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Tour']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewTour']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Tour']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/user-agreement': {
		/** @description Find all the user-agreement's records */
		get: {
			/** @description Find all the user-agreement's records */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description Retrieve user-agreement document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a single user-agreement record */
		put: {
			/** @description Update a single user-agreement record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUser-agreement']
				}
			}
			responses: {
				/** @description Retrieve user-agreement document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a single user-agreement record */
		delete: {
			/** @description Delete a single user-agreement record */
			responses: {
				/** @description deletes a single user-agreement based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/email/': {
		/** @description Send an email */
		post: {
			/** @description Send an email */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/email/test': {
		/** @description Send an test email */
		post: {
			/** @description Send an test email */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/email/settings': {
		/** @description Get the email settings */
		get: {
			/** @description Get the email settings */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/': {
		/** @description Upload a file */
		post: {
			/** @description Upload a file */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/files/count': {
		/** @description Retrieve the total number of uploaded files */
		get: {
			/** @description Retrieve the total number of uploaded files */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/files': {
		/** @description Retrieve all file documents */
		get: {
			/** @description Retrieve all file documents */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/files/{id}': {
		/** @description Retrieve a single file depending on its id */
		get: {
			/** @description Retrieve a single file depending on its id */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete an uploaded file */
		delete: {
			/** @description Delete an uploaded file */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/search/{id}': {
		/** @description Search for an uploaded file */
		get: {
			/** @description Search for an uploaded file */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/roles/{id}': {
		/** @description Retrieve a role depending on its id */
		get: {
			/** @description Retrieve a role depending on its id */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/roles': {
		/** @description Retrieve all role documents */
		get: {
			/** @description Retrieve all role documents */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new role */
		post: {
			/** @description Create a new role */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsRole']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/roles/{role}': {
		/** @description Update a role */
		put: {
			/** @description Update a role */
			parameters: {
				path: {
					role: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsRole']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a role */
		delete: {
			/** @description Delete a role */
			parameters: {
				path: {
					role: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/search/{id}': {
		/** @description Search for users */
		get: {
			/** @description Search for users */
			parameters: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/connect/*': {
		/** @description Connect a provider */
		get: {
			/** @description Connect a provider */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/local': {
		/** @description Login a user using the identifiers email and password */
		post: {
			/** @description Login a user using the identifiers email and password */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/local/register': {
		/** @description Register a new user with the default role */
		post: {
			/** @description Register a new user with the default role */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsUser']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/{provider}/callback': {
		/** @description Successfull redirection after approving a provider */
		get: {
			/** @description Successfull redirection after approving a provider */
			parameters: {
				path: {
					provider: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/forgot-password': {
		/** @description Send the reset password email link */
		post: {
			/** @description Send the reset password email link */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/reset-password': {
		/** @description Reset user password with a code (resetToken) */
		post: {
			/** @description Reset user password with a code (resetToken) */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/email-confirmation': {
		/** @description Validate a user account */
		get: {
			/** @description Validate a user account */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/send-email-confirmation': {
		/** @description Send a confirmation email to user */
		post: {
			/** @description Send a confirmation email to user */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users': {
		/** @description Retrieve all user documents */
		get: {
			/** @description Retrieve all user documents */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users/me': {
		/** @description Retrieve the logged in user information */
		get: {
			/** @description Retrieve the logged in user information */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users/{id}': {
		/** @description Retrieve a single user depending on his id */
		get: {
			/** @description Retrieve a single user depending on his id */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update an existing user */
		put: {
			/** @description Update an existing user */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsUser']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete an existing user */
		delete: {
			/** @description Delete an existing user */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
}

export type webhooks = Record<string, never>

export interface components {
	schemas: {
		City: {
			id: string
			name: string
			image: {
				id: string
				name: string
				alternativeText?: string
				caption?: string
				width?: number
				height?: number
				formats?: Record<string, never>
				hash: string
				ext?: string
				mime: string
				size: number
				url: string
				previewUrl?: string
				provider: string
				provider_metadata?: Record<string, never>
				related?: string
				created_by?: string
				updated_by?: string
			}
			order?: number
			country?: {
				id: string
				name: string
				flag?: string
				code?: string
				cities?: string[]
				vid?: string
				next?: boolean
				createdLanguage?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}
			tours?: {
				id: string
				name: string
				image?: string[]
				rating?: number
				order?: number
				top?: boolean
				guide?: boolean
				private?: boolean
				one_day_trip?: boolean
				nature?: boolean
				ticket_must_have?: boolean
				on_water?: boolean
				package_tour?: boolean
				small_group?: boolean
				invalid_friendly?: boolean
				history?: boolean
				world_war?: boolean
				open_air?: boolean
				street_art?: boolean
				adrenaline?: boolean
				architecture?: boolean
				food?: boolean
				music?: boolean
				for_couples_activities?: boolean
				for_kids_activities?: boolean
				museum?: boolean
				memorial?: boolean
				park?: boolean
				gallery?: boolean
				square?: boolean
				theater?: boolean
				castle?: boolean
				towers?: boolean
				airports?: boolean
				bicycle?: boolean
				minivan?: boolean
				public_transport?: boolean
				limousine?: boolean
				bicycle_taxi?: boolean
				car?: boolean
				cruise?: boolean
				city?: string
				vid?: string
				reviews_count?: number
				price?: number
				reviews?: string[]
				country?: string
				image_urls?: string
				approved?: boolean
				translationApproved?: boolean
				createdLanguage?: string
				next?: boolean
				description?: string
				location_point?: string
				orders?: string[]
				requetedCity?: string
				profile?: string
				duration?: string
				languages?: string
				adult_price?: number
				child_price?: number
				prerequisites?: string
				prohibitions?: string
				included?: string
				not_included?: string
				date?: string
				note?: string
				alwaysAvailable?: boolean
				remark?: string
				withTransfer?: boolean
				hunting?: boolean
				adventure?: boolean
				fishing?: boolean
				night?: boolean
				game?: boolean
				onlyTransfer?: boolean
				fewDaysTrip?: boolean
				placesCount?: number
				mainPhotoUrl?: string
				transferPrice?: number
				transferPhotoUrl?: string
				active?: boolean
				startTime?: string
				weekDays?: string
				freeTicketNotice?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			vid?: string
			/** @default false */
			next?: boolean
			/** @default ru-RU */
			createdLanguage?: string
			/** @default true */
			active?: boolean
			/** @default false */
			popular?: boolean
			/** @default false */
			notCity?: boolean
			localizations?: {
				id: string
				name: string
				image: string
				order?: number
				country?: string
				tours?: string[]
				vid?: string
				next?: boolean
				createdLanguage?: string
				active?: boolean
				popular?: boolean
				notCity?: boolean
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			locale?: string
		}
		NewCity: {
			name: string
			order?: number
			country?: string
			tours?: string[]
			vid?: string
			/** @default false */
			next?: boolean
			/** @default ru-RU */
			createdLanguage?: string
			/** @default true */
			active?: boolean
			/** @default false */
			popular?: boolean
			/** @default false */
			notCity?: boolean
			localizations?: string[]
			locale?: string
			created_by?: string
			updated_by?: string
		}
		Country: {
			id: string
			name: string
			flag?: {
				id: string
				name: string
				alternativeText?: string
				caption?: string
				width?: number
				height?: number
				formats?: Record<string, never>
				hash: string
				ext?: string
				mime: string
				size: number
				url: string
				previewUrl?: string
				provider: string
				provider_metadata?: Record<string, never>
				related?: string
				created_by?: string
				updated_by?: string
			}
			/** @default + */
			code?: string
			cities?: {
				id: string
				name: string
				image: string
				order?: number
				country?: string
				tours?: string[]
				vid?: string
				next?: boolean
				createdLanguage?: string
				active?: boolean
				popular?: boolean
				notCity?: boolean
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			vid?: string
			/** @default ru-RU */
			createdLanguage?: string
			localizations?: {
				id: string
				name: string
				flag?: string
				code?: string
				cities?: string[]
				vid?: string
				next?: boolean
				createdLanguage?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			locale?: string
		}
		NewCountry: {
			name: string
			/** @default + */
			code?: string
			cities?: string[]
			vid?: string
			/** @default false */
			next?: boolean
			/** @default ru-RU */
			createdLanguage?: string
			localizations?: string[]
			locale?: string
			created_by?: string
			updated_by?: string
		}
		Order: {
			id: string
			price?: number
			/** Format: date-time */
			date?: string
			/** @default false */
			seller_confirmed?: boolean
			/** @default false */
			activated?: boolean
			commission?: number
			qrcode_url?: string
			profile?: {
				id: string
				email?: string
				name?: string
				photo?: string
				phone_number?: string
				is_tourist?: boolean
				is_verified?: boolean
				get_promo?: boolean
				documents?: string[]
				photo_url?: string
				documents_urls?: Record<string, never>
				uid?: Record<string, never>
				reviews_count?: number
				reviews?: string[]
				orders?: string[]
				fcm_token?: string
				locale?: string
				balance?: number
				soldOrders?: string[]
				payments?: string[]
				payment_cards?: string[]
				pushSub?: boolean
				tours?: string[]
				socialLink?: string
				hasWhatsapp?: boolean
				hasViber?: boolean
				hasTelegram?: boolean
				created_by?: string
				updated_by?: string
			}
			/** @default false */
			is_shild?: boolean
			/** @default false */
			canceled?: boolean
			tour?: {
				id: string
				name: string
				image?: string[]
				rating?: number
				order?: number
				top?: boolean
				guide?: boolean
				private?: boolean
				one_day_trip?: boolean
				nature?: boolean
				ticket_must_have?: boolean
				on_water?: boolean
				package_tour?: boolean
				small_group?: boolean
				invalid_friendly?: boolean
				history?: boolean
				world_war?: boolean
				open_air?: boolean
				street_art?: boolean
				adrenaline?: boolean
				architecture?: boolean
				food?: boolean
				music?: boolean
				for_couples_activities?: boolean
				for_kids_activities?: boolean
				museum?: boolean
				memorial?: boolean
				park?: boolean
				gallery?: boolean
				square?: boolean
				theater?: boolean
				castle?: boolean
				towers?: boolean
				airports?: boolean
				bicycle?: boolean
				minivan?: boolean
				public_transport?: boolean
				limousine?: boolean
				bicycle_taxi?: boolean
				car?: boolean
				cruise?: boolean
				city?: string
				vid?: string
				reviews_count?: number
				price?: number
				reviews?: string[]
				country?: string
				image_urls?: string
				approved?: boolean
				translationApproved?: boolean
				createdLanguage?: string
				next?: boolean
				description?: string
				location_point?: string
				orders?: string[]
				requetedCity?: string
				profile?: string
				duration?: string
				languages?: string
				adult_price?: number
				child_price?: number
				prerequisites?: string
				prohibitions?: string
				included?: string
				not_included?: string
				date?: string
				note?: string
				alwaysAvailable?: boolean
				remark?: string
				withTransfer?: boolean
				hunting?: boolean
				adventure?: boolean
				fishing?: boolean
				night?: boolean
				game?: boolean
				onlyTransfer?: boolean
				fewDaysTrip?: boolean
				placesCount?: number
				mainPhotoUrl?: string
				transferPrice?: number
				transferPhotoUrl?: string
				active?: boolean
				startTime?: string
				weekDays?: string
				freeTicketNotice?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}
			seller?: {
				id: string
				email?: string
				name?: string
				photo?: string
				phone_number?: string
				is_tourist?: boolean
				is_verified?: boolean
				get_promo?: boolean
				documents?: string[]
				photo_url?: string
				documents_urls?: Record<string, never>
				uid?: Record<string, never>
				reviews_count?: number
				reviews?: string[]
				orders?: string[]
				fcm_token?: string
				locale?: string
				balance?: number
				soldOrders?: string[]
				payments?: string[]
				payment_cards?: string[]
				pushSub?: boolean
				tours?: string[]
				socialLink?: string
				hasWhatsapp?: boolean
				hasViber?: boolean
				hasTelegram?: boolean
				created_by?: string
				updated_by?: string
			}
			tour_name?: string
			yoo_payment?: string
			yoo_deal?: string
		}
		NewOrder: {
			price?: number
			/** Format: date-time */
			date?: string
			/** @default false */
			seller_confirmed?: boolean
			/** @default false */
			activated?: boolean
			commission?: number
			qrcode_url?: string
			profile?: string
			/** @default false */
			is_shild?: boolean
			/** @default false */
			canceled?: boolean
			tour?: string
			seller?: string
			tour_name?: string
			yoo_payment?: string
			yoo_deal?: string
			created_by?: string
			updated_by?: string
		}
		'Payment-card': {
			id: string
			number?: string
			name?: string
			iban?: string
			profile?: {
				id: string
				email?: string
				name?: string
				photo?: string
				phone_number?: string
				is_tourist?: boolean
				is_verified?: boolean
				get_promo?: boolean
				documents?: string[]
				photo_url?: string
				documents_urls?: Record<string, never>
				uid?: Record<string, never>
				reviews_count?: number
				reviews?: string[]
				orders?: string[]
				fcm_token?: string
				locale?: string
				balance?: number
				soldOrders?: string[]
				payments?: string[]
				payment_cards?: string[]
				pushSub?: boolean
				tours?: string[]
				socialLink?: string
				hasWhatsapp?: boolean
				hasViber?: boolean
				hasTelegram?: boolean
				created_by?: string
				updated_by?: string
			}
			payments?: {
				id: string
				sum?: number
				completed?: boolean
				canceled?: boolean
				profile?: string
				payment_card?: string
				created_by?: string
				updated_by?: string
			}[]
		}
		'NewPayment-card': {
			number?: string
			name?: string
			iban?: string
			profile?: string
			payments?: string[]
			created_by?: string
			updated_by?: string
		}
		Payment: {
			id: string
			sum?: number
			/** @default false */
			completed?: boolean
			/** @default false */
			canceled?: boolean
			profile?: {
				id: string
				email?: string
				name?: string
				photo?: string
				phone_number?: string
				is_tourist?: boolean
				is_verified?: boolean
				get_promo?: boolean
				documents?: string[]
				photo_url?: string
				documents_urls?: Record<string, never>
				uid?: Record<string, never>
				reviews_count?: number
				reviews?: string[]
				orders?: string[]
				fcm_token?: string
				locale?: string
				balance?: number
				soldOrders?: string[]
				payments?: string[]
				payment_cards?: string[]
				pushSub?: boolean
				tours?: string[]
				socialLink?: string
				hasWhatsapp?: boolean
				hasViber?: boolean
				hasTelegram?: boolean
				created_by?: string
				updated_by?: string
			}
			payment_card?: {
				id: string
				number?: string
				name?: string
				iban?: string
				profile?: string
				payments?: string[]
				created_by?: string
				updated_by?: string
			}
		}
		NewPayment: {
			sum?: number
			/** @default false */
			completed?: boolean
			/** @default false */
			canceled?: boolean
			profile?: string
			payment_card?: string
			created_by?: string
			updated_by?: string
		}
		'Privacy-policy': {
			id: string
			title?: string
			text?: string
			/** Format: date-time */
			published_at?: string
		}
		'NewPrivacy-policy': {
			title?: string
			text?: string
			/** Format: date-time */
			published_at?: string
			created_by?: string
			updated_by?: string
		}
		Profile: {
			id: string
			email?: string
			name?: string
			photo?: {
				id: string
				name: string
				alternativeText?: string
				caption?: string
				width?: number
				height?: number
				formats?: Record<string, never>
				hash: string
				ext?: string
				mime: string
				size: number
				url: string
				previewUrl?: string
				provider: string
				provider_metadata?: Record<string, never>
				related?: string
				created_by?: string
				updated_by?: string
			}
			phone_number?: string
			/** @default true */
			is_tourist?: boolean
			/** @default false */
			is_verified?: boolean
			/** @default false */
			get_promo?: boolean
			documents?: {
				id: string
				name: string
				alternativeText?: string
				caption?: string
				width?: number
				height?: number
				formats?: Record<string, never>
				hash: string
				ext?: string
				mime: string
				size: number
				url: string
				previewUrl?: string
				provider: string
				provider_metadata?: Record<string, never>
				related?: string
				created_by?: string
				updated_by?: string
			}[]
			photo_url?: string
			documents_urls?: Record<string, never>
			uid?: Record<string, never>
			reviews_count?: number
			reviews?: {
				id: string
				name?: string
				photo_url?: string
				text?: string
				rating?: number
				tour?: string
				profile?: string
				created_by?: string
				updated_by?: string
			}[]
			orders?: {
				id: string
				price?: number
				date?: string
				seller_confirmed?: boolean
				activated?: boolean
				commission?: number
				qrcode_url?: string
				profile?: string
				is_shild?: boolean
				canceled?: boolean
				tour?: string
				seller?: string
				tour_name?: string
				yoo_payment?: string
				yoo_deal?: string
				created_by?: string
				updated_by?: string
			}[]
			fcm_token?: string
			locale?: string
			/** @default 0 */
			balance?: number
			soldOrders?: {
				id: string
				price?: number
				date?: string
				seller_confirmed?: boolean
				activated?: boolean
				commission?: number
				qrcode_url?: string
				profile?: string
				is_shild?: boolean
				canceled?: boolean
				tour?: string
				seller?: string
				tour_name?: string
				yoo_payment?: string
				yoo_deal?: string
				created_by?: string
				updated_by?: string
			}[]
			payments?: {
				id: string
				sum?: number
				completed?: boolean
				canceled?: boolean
				profile?: string
				payment_card?: string
				created_by?: string
				updated_by?: string
			}[]
			payment_cards?: {
				id: string
				number?: string
				name?: string
				iban?: string
				profile?: string
				payments?: string[]
				created_by?: string
				updated_by?: string
			}[]
			/** @default false */
			pushSub?: boolean
			tours?: {
				id: string
				name: string
				image?: string[]
				rating?: number
				order?: number
				top?: boolean
				guide?: boolean
				private?: boolean
				one_day_trip?: boolean
				nature?: boolean
				ticket_must_have?: boolean
				on_water?: boolean
				package_tour?: boolean
				small_group?: boolean
				invalid_friendly?: boolean
				history?: boolean
				world_war?: boolean
				open_air?: boolean
				street_art?: boolean
				adrenaline?: boolean
				architecture?: boolean
				food?: boolean
				music?: boolean
				for_couples_activities?: boolean
				for_kids_activities?: boolean
				museum?: boolean
				memorial?: boolean
				park?: boolean
				gallery?: boolean
				square?: boolean
				theater?: boolean
				castle?: boolean
				towers?: boolean
				airports?: boolean
				bicycle?: boolean
				minivan?: boolean
				public_transport?: boolean
				limousine?: boolean
				bicycle_taxi?: boolean
				car?: boolean
				cruise?: boolean
				city?: string
				vid?: string
				reviews_count?: number
				price?: number
				reviews?: string[]
				country?: string
				image_urls?: string
				approved?: boolean
				translationApproved?: boolean
				createdLanguage?: string
				next?: boolean
				description?: string
				location_point?: string
				orders?: string[]
				requetedCity?: string
				profile?: string
				duration?: string
				languages?: string
				adult_price?: number
				child_price?: number
				prerequisites?: string
				prohibitions?: string
				included?: string
				not_included?: string
				date?: string
				note?: string
				alwaysAvailable?: boolean
				remark?: string
				withTransfer?: boolean
				hunting?: boolean
				adventure?: boolean
				fishing?: boolean
				night?: boolean
				game?: boolean
				onlyTransfer?: boolean
				fewDaysTrip?: boolean
				placesCount?: number
				mainPhotoUrl?: string
				transferPrice?: number
				transferPhotoUrl?: string
				active?: boolean
				startTime?: string
				weekDays?: string
				freeTicketNotice?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			socialLink?: string
			/** @default false */
			hasWhatsapp?: boolean
			/** @default false */
			hasViber?: boolean
			/** @default false */
			hasTelegram?: boolean
		}
		NewProfile: {
			email?: string
			name?: string
			phone_number?: string
			/** @default true */
			is_tourist?: boolean
			/** @default false */
			is_verified?: boolean
			/** @default false */
			get_promo?: boolean
			photo_url?: string
			documents_urls?: Record<string, never>
			uid?: Record<string, never>
			reviews_count?: number
			reviews?: string[]
			orders?: string[]
			fcm_token?: string
			locale?: string
			/** @default 0 */
			balance?: number
			soldOrders?: string[]
			payments?: string[]
			payment_cards?: string[]
			/** @default false */
			pushSub?: boolean
			tours?: string[]
			socialLink?: string
			/** @default false */
			hasWhatsapp?: boolean
			/** @default false */
			hasViber?: boolean
			/** @default false */
			hasTelegram?: boolean
			created_by?: string
			updated_by?: string
		}
		Remarks: {
			id: string
			title: string
			remark: string
			tour?: {
				id: string
				name: string
				image?: string[]
				rating?: number
				order?: number
				top?: boolean
				guide?: boolean
				private?: boolean
				one_day_trip?: boolean
				nature?: boolean
				ticket_must_have?: boolean
				on_water?: boolean
				package_tour?: boolean
				small_group?: boolean
				invalid_friendly?: boolean
				history?: boolean
				world_war?: boolean
				open_air?: boolean
				street_art?: boolean
				adrenaline?: boolean
				architecture?: boolean
				food?: boolean
				music?: boolean
				for_couples_activities?: boolean
				for_kids_activities?: boolean
				museum?: boolean
				memorial?: boolean
				park?: boolean
				gallery?: boolean
				square?: boolean
				theater?: boolean
				castle?: boolean
				towers?: boolean
				airports?: boolean
				bicycle?: boolean
				minivan?: boolean
				public_transport?: boolean
				limousine?: boolean
				bicycle_taxi?: boolean
				car?: boolean
				cruise?: boolean
				city?: string
				vid?: string
				reviews_count?: number
				price?: number
				reviews?: string[]
				country?: string
				image_urls?: string
				approved?: boolean
				translationApproved?: boolean
				createdLanguage?: string
				next?: boolean
				description?: string
				location_point?: string
				orders?: string[]
				requetedCity?: string
				profile?: string
				duration?: string
				languages?: string
				adult_price?: number
				child_price?: number
				prerequisites?: string
				prohibitions?: string
				included?: string
				not_included?: string
				date?: string
				note?: string
				alwaysAvailable?: boolean
				remark?: string
				withTransfer?: boolean
				hunting?: boolean
				adventure?: boolean
				fishing?: boolean
				night?: boolean
				game?: boolean
				onlyTransfer?: boolean
				fewDaysTrip?: boolean
				placesCount?: number
				mainPhotoUrl?: string
				transferPrice?: number
				transferPhotoUrl?: string
				active?: boolean
				startTime?: string
				weekDays?: string
				freeTicketNotice?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}
		}
		NewRemarks: {
			title: string
			remark: string
			tour?: string
			created_by?: string
			updated_by?: string
		}
		Review: {
			id: string
			name?: string
			photo_url?: string
			text?: string
			rating?: number
			tour?: {
				id: string
				name: string
				image?: string[]
				rating?: number
				order?: number
				top?: boolean
				guide?: boolean
				private?: boolean
				one_day_trip?: boolean
				nature?: boolean
				ticket_must_have?: boolean
				on_water?: boolean
				package_tour?: boolean
				small_group?: boolean
				invalid_friendly?: boolean
				history?: boolean
				world_war?: boolean
				open_air?: boolean
				street_art?: boolean
				adrenaline?: boolean
				architecture?: boolean
				food?: boolean
				music?: boolean
				for_couples_activities?: boolean
				for_kids_activities?: boolean
				museum?: boolean
				memorial?: boolean
				park?: boolean
				gallery?: boolean
				square?: boolean
				theater?: boolean
				castle?: boolean
				towers?: boolean
				airports?: boolean
				bicycle?: boolean
				minivan?: boolean
				public_transport?: boolean
				limousine?: boolean
				bicycle_taxi?: boolean
				car?: boolean
				cruise?: boolean
				city?: string
				vid?: string
				reviews_count?: number
				price?: number
				reviews?: string[]
				country?: string
				image_urls?: string
				approved?: boolean
				translationApproved?: boolean
				createdLanguage?: string
				next?: boolean
				description?: string
				location_point?: string
				orders?: string[]
				requetedCity?: string
				profile?: string
				duration?: string
				languages?: string
				adult_price?: number
				child_price?: number
				prerequisites?: string
				prohibitions?: string
				included?: string
				not_included?: string
				date?: string
				note?: string
				alwaysAvailable?: boolean
				remark?: string
				withTransfer?: boolean
				hunting?: boolean
				adventure?: boolean
				fishing?: boolean
				night?: boolean
				game?: boolean
				onlyTransfer?: boolean
				fewDaysTrip?: boolean
				placesCount?: number
				mainPhotoUrl?: string
				transferPrice?: number
				transferPhotoUrl?: string
				active?: boolean
				startTime?: string
				weekDays?: string
				freeTicketNotice?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}
			profile?: {
				id: string
				email?: string
				name?: string
				photo?: string
				phone_number?: string
				is_tourist?: boolean
				is_verified?: boolean
				get_promo?: boolean
				documents?: string[]
				photo_url?: string
				documents_urls?: Record<string, never>
				uid?: Record<string, never>
				reviews_count?: number
				reviews?: string[]
				orders?: string[]
				fcm_token?: string
				locale?: string
				balance?: number
				soldOrders?: string[]
				payments?: string[]
				payment_cards?: string[]
				pushSub?: boolean
				tours?: string[]
				socialLink?: string
				hasWhatsapp?: boolean
				hasViber?: boolean
				hasTelegram?: boolean
				created_by?: string
				updated_by?: string
			}
		}
		NewReview: {
			name?: string
			photo_url?: string
			text?: string
			rating?: number
			tour?: string
			profile?: string
			created_by?: string
			updated_by?: string
		}
		Settings: {
			id: string
			/** @default false */
			payment?: boolean
		}
		NewSettings: {
			/** @default false */
			payment?: boolean
			created_by?: string
			updated_by?: string
		}
		Tour: {
			id: string
			name: string
			image?: {
				id: string
				name: string
				alternativeText?: string
				caption?: string
				width?: number
				height?: number
				formats?: Record<string, never>
				hash: string
				ext?: string
				mime: string
				size: number
				url: string
				previewUrl?: string
				provider: string
				provider_metadata?: Record<string, never>
				related?: string
				created_by?: string
				updated_by?: string
			}[]
			rating?: number
			order?: number
			/** @default false */
			top?: boolean
			/** @default false */
			guide?: boolean
			/** @default false */
			private?: boolean
			/** @default false */
			one_day_trip?: boolean
			/** @default false */
			nature?: boolean
			/** @default false */
			ticket_must_have?: boolean
			/** @default false */
			on_water?: boolean
			/** @default false */
			package_tour?: boolean
			/** @default false */
			small_group?: boolean
			/** @default false */
			invalid_friendly?: boolean
			/** @default false */
			history?: boolean
			/** @default false */
			world_war?: boolean
			/** @default false */
			open_air?: boolean
			/** @default false */
			street_art?: boolean
			/** @default false */
			adrenaline?: boolean
			/** @default false */
			architecture?: boolean
			/** @default false */
			food?: boolean
			/** @default false */
			music?: boolean
			/** @default false */
			for_couples_activities?: boolean
			/** @default false */
			for_kids_activities?: boolean
			/** @default false */
			museum?: boolean
			/** @default false */
			memorial?: boolean
			/** @default false */
			park?: boolean
			/** @default false */
			gallery?: boolean
			/** @default false */
			square?: boolean
			/** @default false */
			theater?: boolean
			/** @default false */
			castle?: boolean
			/** @default false */
			towers?: boolean
			/** @default false */
			airports?: boolean
			/** @default false */
			bicycle?: boolean
			/** @default false */
			minivan?: boolean
			/** @default false */
			public_transport?: boolean
			/** @default false */
			limousine?: boolean
			/** @default false */
			bicycle_taxi?: boolean
			/** @default false */
			car?: boolean
			/** @default false */
			cruise?: boolean
			city?: {
				id: string
				name: string
				image: string
				order?: number
				country?: string
				tours?: string[]
				vid?: string
				next?: boolean
				createdLanguage?: string
				active?: boolean
				popular?: boolean
				notCity?: boolean
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}
			vid?: string
			/** @default 0 */
			reviews_count?: number
			/** @default 0 */
			price?: number
			reviews?: {
				id: string
				name?: string
				photo_url?: string
				text?: string
				rating?: number
				tour?: string
				profile?: string
				created_by?: string
				updated_by?: string
			}[]
			country?: string
			image_urls?: string
			/** @default false */
			approved?: boolean
			/** @default false */
			translationApproved?: boolean
			/** @default ru-RU */
			createdLanguage?: string
			description?: string
			location_point?: string
			orders?: {
				id: string
				price?: number
				date?: string
				seller_confirmed?: boolean
				activated?: boolean
				commission?: number
				qrcode_url?: string
				profile?: string
				is_shild?: boolean
				canceled?: boolean
				tour?: string
				seller?: string
				tour_name?: string
				yoo_payment?: string
				yoo_deal?: string
				created_by?: string
				updated_by?: string
			}[]
			requetedCity?: string
			profile?: {
				id: string
				email?: string
				name?: string
				photo?: string
				phone_number?: string
				is_tourist?: boolean
				is_verified?: boolean
				get_promo?: boolean
				documents?: string[]
				photo_url?: string
				documents_urls?: Record<string, never>
				uid?: Record<string, never>
				reviews_count?: number
				reviews?: string[]
				orders?: string[]
				fcm_token?: string
				locale?: string
				balance?: number
				soldOrders?: string[]
				payments?: string[]
				payment_cards?: string[]
				pushSub?: boolean
				tours?: string[]
				socialLink?: string
				hasWhatsapp?: boolean
				hasViber?: boolean
				hasTelegram?: boolean
				created_by?: string
				updated_by?: string
			}
			duration?: string
			languages?: string
			adult_price?: number
			child_price?: number
			prerequisites?: string
			prohibitions?: string
			included?: string
			not_included?: string
			/** Format: date-time */
			date?: string
			note?: string
			/** @default false */
			alwaysAvailable?: boolean
			remark?: {
				id: string
				title: string
				remark: string
				tour?: string
				created_by?: string
				updated_by?: string
			}
			/** @default false */
			withTransfer?: boolean
			/** @default false */
			hunting?: boolean
			/** @default false */
			adventure?: boolean
			/** @default false */
			fishing?: boolean
			/** @default false */
			night?: boolean
			/** @default false */
			game?: boolean
			/** @default false */
			onlyTransfer?: boolean
			/** @default false */
			fewDaysTrip?: boolean
			placesCount?: number
			mainPhotoUrl?: string
			transferPrice?: number
			transferPhotoUrl?: string
			/** @default true */
			active?: boolean
			startTime?: string
			weekDays?: string
			freeTicketNotice?: string
			localizations?: {
				id: string
				name: string
				image?: string[]
				rating?: number
				order?: number
				top?: boolean
				guide?: boolean
				private?: boolean
				one_day_trip?: boolean
				nature?: boolean
				ticket_must_have?: boolean
				on_water?: boolean
				package_tour?: boolean
				small_group?: boolean
				invalid_friendly?: boolean
				history?: boolean
				world_war?: boolean
				open_air?: boolean
				street_art?: boolean
				adrenaline?: boolean
				architecture?: boolean
				food?: boolean
				music?: boolean
				for_couples_activities?: boolean
				for_kids_activities?: boolean
				museum?: boolean
				memorial?: boolean
				park?: boolean
				gallery?: boolean
				square?: boolean
				theater?: boolean
				castle?: boolean
				towers?: boolean
				airports?: boolean
				bicycle?: boolean
				minivan?: boolean
				public_transport?: boolean
				limousine?: boolean
				bicycle_taxi?: boolean
				car?: boolean
				cruise?: boolean
				city?: string
				vid?: string
				reviews_count?: number
				price?: number
				reviews?: string[]
				country?: string
				image_urls?: string
				approved?: boolean
				translationApproved?: boolean
				createdLanguage?: string
				next?: boolean
				description?: string
				location_point?: string
				orders?: string[]
				requetedCity?: string
				profile?: string
				duration?: string
				languages?: string
				adult_price?: number
				child_price?: number
				prerequisites?: string
				prohibitions?: string
				included?: string
				not_included?: string
				date?: string
				note?: string
				alwaysAvailable?: boolean
				remark?: string
				withTransfer?: boolean
				hunting?: boolean
				adventure?: boolean
				fishing?: boolean
				night?: boolean
				game?: boolean
				onlyTransfer?: boolean
				fewDaysTrip?: boolean
				placesCount?: number
				mainPhotoUrl?: string
				transferPrice?: number
				transferPhotoUrl?: string
				active?: boolean
				startTime?: string
				weekDays?: string
				freeTicketNotice?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			locale?: string
		}
		NewTour: {
			name: string
			rating?: number
			order?: number
			/** @default false */
			top?: boolean
			/** @default false */
			guide?: boolean
			/** @default false */
			private?: boolean
			/** @default false */
			one_day_trip?: boolean
			/** @default false */
			nature?: boolean
			/** @default false */
			ticket_must_have?: boolean
			/** @default false */
			on_water?: boolean
			/** @default false */
			package_tour?: boolean
			/** @default false */
			small_group?: boolean
			/** @default false */
			invalid_friendly?: boolean
			/** @default false */
			history?: boolean
			/** @default false */
			world_war?: boolean
			/** @default false */
			open_air?: boolean
			/** @default false */
			street_art?: boolean
			/** @default false */
			adrenaline?: boolean
			/** @default false */
			architecture?: boolean
			/** @default false */
			food?: boolean
			/** @default false */
			music?: boolean
			/** @default false */
			for_couples_activities?: boolean
			/** @default false */
			for_kids_activities?: boolean
			/** @default false */
			museum?: boolean
			/** @default false */
			memorial?: boolean
			/** @default false */
			park?: boolean
			/** @default false */
			gallery?: boolean
			/** @default false */
			square?: boolean
			/** @default false */
			theater?: boolean
			/** @default false */
			castle?: boolean
			/** @default false */
			towers?: boolean
			/** @default false */
			airports?: boolean
			/** @default false */
			bicycle?: boolean
			/** @default false */
			minivan?: boolean
			/** @default false */
			public_transport?: boolean
			/** @default false */
			limousine?: boolean
			/** @default false */
			bicycle_taxi?: boolean
			/** @default false */
			car?: boolean
			/** @default false */
			cruise?: boolean
			city?: string
			vid?: string
			/** @default 0 */
			reviews_count?: number
			/** @default 0 */
			price?: number
			reviews?: string[]
			country?: string
			image_urls?: string
			/** @default false */
			approved?: boolean
			/** @default false */
			translationApproved?: boolean
			/** @default ru-RU */
			createdLanguage?: string
			/** @default false */
			next?: boolean
			description?: string
			location_point?: string
			orders?: string[]
			requetedCity?: string
			profile?: string
			duration?: string
			languages?: string
			adult_price?: number
			child_price?: number
			prerequisites?: string
			prohibitions?: string
			included?: string
			not_included?: string
			/** Format: date-time */
			date?: string
			note?: string
			/** @default false */
			alwaysAvailable?: boolean
			remark?: string
			/** @default false */
			withTransfer?: boolean
			/** @default false */
			hunting?: boolean
			/** @default false */
			adventure?: boolean
			/** @default false */
			fishing?: boolean
			/** @default false */
			night?: boolean
			/** @default false */
			game?: boolean
			/** @default false */
			onlyTransfer?: boolean
			/** @default false */
			fewDaysTrip?: boolean
			placesCount?: number
			mainPhotoUrl?: string
			transferPrice?: number
			transferPhotoUrl?: string
			/** @default true */
			active?: boolean
			startTime?: string
			weekDays?: string
			freeTicketNotice?: string
			localizations?: string[]
			locale?: string
			created_by?: string
			updated_by?: string
		}
		'User-agreement': {
			id: string
			title?: string
			text?: string
			/** Format: date-time */
			published_at?: string
		}
		'NewUser-agreement': {
			title?: string
			text?: string
			/** Format: date-time */
			published_at?: string
			created_by?: string
			updated_by?: string
		}
		UsersPermissionsRole: {
			id: string
			name: string
			description?: string
			type?: string
			permissions?: {
				id: string
				type: string
				controller: string
				action: string
				enabled: boolean
				policy?: string
				role?: string
				created_by?: string
				updated_by?: string
			}[]
			users?: {
				id: string
				username: string
				email: string
				provider?: string
				password?: string
				resetPasswordToken?: string
				confirmationToken?: string
				confirmed?: boolean
				blocked?: boolean
				role?: string
				language?: string
				created_by?: string
				updated_by?: string
			}[]
		}
		NewUsersPermissionsRole: {
			name: string
			description?: string
			type?: string
			permissions?: string[]
			users?: string[]
			created_by?: string
			updated_by?: string
		}
		UsersPermissionsUser: {
			id: string
			username: string
			email: string
			provider?: string
			/** @default false */
			confirmed?: boolean
			/** @default false */
			blocked?: boolean
			role?: {
				id: string
				name: string
				description?: string
				type?: string
				permissions?: string[]
				users?: string[]
				created_by?: string
				updated_by?: string
			}
			language?: {
				id: string
				name?: string
				code?: string
				translators?: string[]
				created_by?: string
				updated_by?: string
			}
		}
		NewUsersPermissionsUser: {
			username: string
			email: string
			provider?: string
			/** Format: password */
			password?: string
			resetPasswordToken?: string
			confirmationToken?: string
			/** @default false */
			confirmed?: boolean
			/** @default false */
			blocked?: boolean
			role?: string
			language?: string
			created_by?: string
			updated_by?: string
		}
		Error: {
			/** Format: int32 */
			code: number
			message: string
		}
	}
	responses: never
	parameters: never
	requestBodies: never
	headers: never
	pathItems: never
}

export type external = Record<string, never>

export type operations = Record<string, never>
