/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	'/cycles': {
		/** @description Find all the cycles's records */
		get: {
			/** @description Find all the cycles's records */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description Retrieve cycles document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Cycles'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new cycles record */
		post: {
			/** @description Create a new cycles record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewCycles']
				}
			}
			responses: {
				/** @description Retrieve cycles document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Cycles']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/cycles/count': {
		/** @description Retrieve the number of cycles documents */
		get: {
			/** @description Retrieve the number of cycles documents */
			responses: {
				/** @description Retrieve cycles document(s) */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/cycles/{id}': {
		/** @description Find one cycles record */
		get: {
			/** @description Find one cycles record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description Retrieve cycles document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Cycles']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a single cycles record */
		put: {
			/** @description Update a single cycles record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewCycles']
				}
			}
			responses: {
				/** @description Retrieve cycles document(s) */
				200: {
					content: {
						'application/json': components['schemas']['Cycles']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a single cycles record */
		delete: {
			/** @description Delete a single cycles record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single cycles based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/general-notifications': {
		/** @description Find all the general-notifications's records */
		get: {
			/** @description Find all the general-notifications's records */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description Retrieve general-notifications document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new general-notifications record */
		post: {
			/** @description Create a new general-notifications record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewGeneral-notifications']
				}
			}
			responses: {
				/** @description Retrieve general-notifications document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/general-notifications/count': {
		/** @description Retrieve the number of general-notifications documents */
		get: {
			/** @description Retrieve the number of general-notifications documents */
			responses: {
				/** @description Retrieve general-notifications document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/general-notifications/{id}': {
		/** @description Find one general-notifications record */
		get: {
			/** @description Find one general-notifications record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description Retrieve general-notifications document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a single general-notifications record */
		put: {
			/** @description Update a single general-notifications record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewGeneral-notifications']
				}
			}
			responses: {
				/** @description Retrieve general-notifications document(s) */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a single general-notifications record */
		delete: {
			/** @description Delete a single general-notifications record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single general-notifications based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/links': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Link'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewLink']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Link']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/links/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/links/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Link']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewLink']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Link']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/messages': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Message'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewMessage']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Message']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/messages/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/messages/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Message']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewMessage']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Message']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/notifications': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Notification'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewNotification']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Notification']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/notifications/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/notifications/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Notification']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewNotification']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Notification']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/profiles': {
		get: {
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new record */
		post: {
			/** @description Create a new record */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewProfile']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/profiles/count': {
		get: {
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							count?: number
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/profiles/{id}': {
		get: {
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update a record */
		put: {
			/** @description Update a record */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewProfile']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['Profile']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a record */
		delete: {
			/** @description Delete a record */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description deletes a single record based on the ID supplied */
				200: {
					content: {
						'application/json': number
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/email/': {
		/** @description Send an email */
		post: {
			/** @description Send an email */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/email/test': {
		/** @description Send an test email */
		post: {
			/** @description Send an test email */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/email/settings': {
		/** @description Get the email settings */
		get: {
			/** @description Get the email settings */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/': {
		/** @description Upload a file */
		post: {
			/** @description Upload a file */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/files/count': {
		/** @description Retrieve the total number of uploaded files */
		get: {
			/** @description Retrieve the total number of uploaded files */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/files': {
		/** @description Retrieve all file documents */
		get: {
			/** @description Retrieve all file documents */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/files/{id}': {
		/** @description Retrieve a single file depending on its id */
		get: {
			/** @description Retrieve a single file depending on its id */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete an uploaded file */
		delete: {
			/** @description Delete an uploaded file */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/upload/search/{id}': {
		/** @description Search for an uploaded file */
		get: {
			/** @description Search for an uploaded file */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/roles/{id}': {
		/** @description Retrieve a role depending on its id */
		get: {
			/** @description Retrieve a role depending on its id */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/roles': {
		/** @description Retrieve all role documents */
		get: {
			/** @description Retrieve all role documents */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Create a new role */
		post: {
			/** @description Create a new role */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsRole']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/roles/{role}': {
		/** @description Update a role */
		put: {
			/** @description Update a role */
			parameters: {
				path: {
					role: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsRole']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsRole']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete a role */
		delete: {
			/** @description Delete a role */
			parameters: {
				path: {
					role: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users-permissions/search/{id}': {
		/** @description Search for users */
		get: {
			/** @description Search for users */
			parameters: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/connect/*': {
		/** @description Connect a provider */
		get: {
			/** @description Connect a provider */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/local': {
		/** @description Login a user using the identifiers email and password */
		post: {
			/** @description Login a user using the identifiers email and password */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/local/register': {
		/** @description Register a new user with the default role */
		post: {
			/** @description Register a new user with the default role */
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsUser']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/{provider}/callback': {
		/** @description Successfull redirection after approving a provider */
		get: {
			/** @description Successfull redirection after approving a provider */
			parameters: {
				path: {
					provider: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/forgot-password': {
		/** @description Send the reset password email link */
		post: {
			/** @description Send the reset password email link */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/reset-password': {
		/** @description Reset user password with a code (resetToken) */
		post: {
			/** @description Reset user password with a code (resetToken) */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/email-confirmation': {
		/** @description Validate a user account */
		get: {
			/** @description Validate a user account */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/auth/send-email-confirmation': {
		/** @description Send a confirmation email to user */
		post: {
			/** @description Send a confirmation email to user */
			requestBody: {
				content: {
					'application/json': {
						foo?: string
					}
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users': {
		/** @description Retrieve all user documents */
		get: {
			/** @description Retrieve all user documents */
			parameters?: {
				/** @description Maximum number of results possible */
				/** @description Sort according to a specific field. */
				/** @description Skip a specific number of entries (especially useful for pagination) */
				/** @description Get entries that matches exactly your input */
				/** @description Get records that are not equals to something */
				/** @description Get record that are lower than a value */
				/** @description Get records that are lower than or equal to a value */
				/** @description Get records that are greater than a value */
				/** @description Get records that are greater than  or equal a value */
				/** @description Get records that contains a value */
				/** @description Get records that contains (case sensitive) a value */
				/** @description Get records that matches any value in the array of values */
				/** @description Get records that doesn't match any value in the array of values */
				query?: {
					_limit?: number
					_sort?: string
					_start?: number
					'='?: string
					_ne?: string
					_lt?: string
					_lte?: string
					_gt?: string
					_gte?: string
					_contains?: string
					_containss?: string
					_in?: string[]
					_nin?: string[]
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser'][]
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users/me': {
		/** @description Retrieve the logged in user information */
		get: {
			/** @description Retrieve the logged in user information */
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
	'/users/{id}': {
		/** @description Retrieve a single user depending on his id */
		get: {
			/** @description Retrieve a single user depending on his id */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Update an existing user */
		put: {
			/** @description Update an existing user */
			parameters: {
				path: {
					id: string
				}
			}
			requestBody: {
				content: {
					'application/json': components['schemas']['NewUsersPermissionsUser']
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': components['schemas']['UsersPermissionsUser']
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
		/** @description Delete an existing user */
		delete: {
			/** @description Delete an existing user */
			parameters: {
				path: {
					id: string
				}
			}
			responses: {
				/** @description response */
				200: {
					content: {
						'application/json': {
							foo?: string
						}
					}
				}
				/** @description Forbidden */
				403: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description Not found */
				404: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
				/** @description unexpected error */
				default: {
					content: {
						'application/json': components['schemas']['Error']
					}
				}
			}
		}
	}
}

export type webhooks = Record<string, never>

export interface components {
	schemas: {
		Cycles: {
			id: string
			name: string
			value: string
		}
		NewCycles: {
			name: string
			value: string
			created_by?: string
			updated_by?: string
		}
		'General-notifications': {
			id: string
			title: string
			body: string
			/** @enum {string} */
			cycle?:
				| 'remarkCreated'
				| 'tourApproved'
				| 'orderCreated'
				| 'orderSellerApproved'
				| 'orderCancelled'
				| 'profileVerified'
			image?: string
			link?: string
			/** @default false */
			translationApproved?: boolean
			localizations?: {
				id: string
				title: string
				body: string
				/** @enum {string} */
				cycle?:
					| 'remarkCreated'
					| 'tourApproved'
					| 'orderCreated'
					| 'orderSellerApproved'
					| 'orderCancelled'
					| 'profileVerified'
				image?: string
				link?: string
				translationApproved?: boolean
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			locale?: string
		}
		'NewGeneral-notifications': {
			title: string
			body: string
			/** @enum {string} */
			cycle?:
				| 'remarkCreated'
				| 'tourApproved'
				| 'orderCreated'
				| 'orderSellerApproved'
				| 'orderCancelled'
				| 'profileVerified'
			image?: string
			link?: string
			/** @default false */
			translationApproved?: boolean
			localizations?: string[]
			locale?: string
			created_by?: string
			updated_by?: string
		}
		Link: {
			id: string
			name: string
			value?: string
		}
		NewLink: {
			name: string
			value?: string
			created_by?: string
			updated_by?: string
		}
		Message: {
			id: string
			title: string
			body: string
			imageUrl?: string
			/** @default false */
			forTourists?: boolean
			/** @default false */
			forGuides?: boolean
			/** @default false */
			sended?: boolean
			/** @default false */
			translationApproved?: boolean
			link?: string
			localizations?: {
				id: string
				title: string
				body: string
				imageUrl?: string
				forTourists?: boolean
				forGuides?: boolean
				sended?: boolean
				translationApproved?: boolean
				link?: string
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			locale?: string
		}
		NewMessage: {
			title: string
			body: string
			imageUrl?: string
			/** @default false */
			forTourists?: boolean
			/** @default false */
			forGuides?: boolean
			/** @default false */
			sended?: boolean
			/** @default false */
			translationApproved?: boolean
			link?: string
			localizations?: string[]
			locale?: string
			created_by?: string
			updated_by?: string
		}
		Notification: {
			id: string
			title: string
			body: string
			link?: string
			profile?: {
				id: string
				email?: string
				fcm_token?: string
				phone_number?: string
				is_tourist?: boolean
				notifications?: string[]
				uid: string
				locale?: string
				name?: string
				created_by?: string
				updated_by?: string
			}
			/** @default false */
			forTourists?: boolean
			/** @default false */
			forGuides?: boolean
			image?: string
			/** @default false */
			forAllUsers?: boolean
			localizations?: {
				id: string
				title: string
				body: string
				link?: string
				profile?: string
				forTourists?: boolean
				forGuides?: boolean
				image?: string
				forAllUsers?: boolean
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			locale?: string
		}
		NewNotification: {
			title: string
			body: string
			link?: string
			profile?: string
			/** @default false */
			forTourists?: boolean
			/** @default false */
			forGuides?: boolean
			image?: string
			/** @default false */
			forAllUsers?: boolean
			localizations?: string[]
			locale?: string
			created_by?: string
			updated_by?: string
		}
		Profile: {
			id: string
			email?: string
			fcm_token?: string
			phone_number?: string
			/** @default true */
			is_tourist?: boolean
			notifications?: {
				id: string
				title: string
				body: string
				link?: string
				profile?: string
				forTourists?: boolean
				forGuides?: boolean
				image?: string
				forAllUsers?: boolean
				localizations?: string[]
				locale?: string
				created_by?: string
				updated_by?: string
			}[]
			uid: string
			locale?: string
			name?: string
		}
		NewProfile: {
			email?: string
			fcm_token?: string
			phone_number?: string
			/** @default true */
			is_tourist?: boolean
			notifications?: string[]
			uid: string
			locale?: string
			name?: string
			created_by?: string
			updated_by?: string
		}
		UsersPermissionsRole: {
			id: string
			name: string
			description?: string
			type?: string
			permissions?: {
				id: string
				type: string
				controller: string
				action: string
				enabled: boolean
				policy?: string
				role?: string
				created_by?: string
				updated_by?: string
			}[]
			users?: {
				id: string
				username: string
				email: string
				provider?: string
				password?: string
				resetPasswordToken?: string
				confirmationToken?: string
				confirmed?: boolean
				blocked?: boolean
				role?: string
				created_by?: string
				updated_by?: string
			}[]
		}
		NewUsersPermissionsRole: {
			name: string
			description?: string
			type?: string
			permissions?: string[]
			users?: string[]
			created_by?: string
			updated_by?: string
		}
		UsersPermissionsUser: {
			id: string
			username: string
			email: string
			provider?: string
			/** @default false */
			confirmed?: boolean
			/** @default false */
			blocked?: boolean
			role?: {
				id: string
				name: string
				description?: string
				type?: string
				permissions?: string[]
				users?: string[]
				created_by?: string
				updated_by?: string
			}
		}
		NewUsersPermissionsUser: {
			username: string
			email: string
			provider?: string
			/** Format: password */
			password?: string
			resetPasswordToken?: string
			confirmationToken?: string
			/** @default false */
			confirmed?: boolean
			/** @default false */
			blocked?: boolean
			role?: string
			created_by?: string
			updated_by?: string
		}
		Error: {
			/** Format: int32 */
			code: number
			message: string
		}
	}
	responses: never
	parameters: never
	requestBodies: never
	headers: never
	pathItems: never
}

export type external = Record<string, never>

export type operations = Record<string, never>
